CREATE DATABASE IF NOT EXISTS BankDB;
USE BankDB;
 
-- Create Customers Table
CREATE TABLE Customers (
    CustomerID INT AUTO_INCREMENT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Email VARCHAR(100),
    Phone VARCHAR(15),
    Address VARCHAR(100)
);
 
-- Create Branches Table
CREATE TABLE Branches (
    BranchID INT AUTO_INCREMENT PRIMARY KEY,
    BranchName VARCHAR(100),
    Location VARCHAR(100)
);
 
-- Create Employees Table
CREATE TABLE Employees (
    EmployeeID INT AUTO_INCREMENT PRIMARY KEY,
    BranchID INT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Role VARCHAR(50),
    Salary DECIMAL(10, 2),
    FOREIGN KEY (BranchID) REFERENCES Branches(BranchID)
);
 
-- Create Accounts Table
CREATE TABLE Accounts (
    AccountID INT AUTO_INCREMENT PRIMARY KEY,
    CustomerID INT,
    AccountType VARCHAR(50),
    Balance DECIMAL(15, 2),
    CreatedDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
 
-- Create Transactions Table
CREATE TABLE Transactions (
    TransactionID INT AUTO_INCREMENT PRIMARY KEY,
    AccountID INT,
    TransactionType VARCHAR(50),
    Amount DECIMAL(15, 2),
    TransactionDate DATETIME,
    FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)
);
 
INSERT INTO Customers (FirstName, LastName, Email, Phone, Address) 
VALUES 
('John', 'Doe', 'john.doe@example.com', '1234567890', '123 Elm St'),
('Jane', 'Smith', 'jane.smith@example.com', '9876543210', '456 Oak St'),
('Michael', 'Brown', 'michael.brown@example.com', '5678901234', '789 Pine St');
 
INSERT INTO Branches (BranchName, Location)
VALUES 
('Downtown', 'New York'),
('Uptown', 'San Francisco');
 
INSERT INTO Employees (BranchID, FirstName, LastName, Role, Salary) 
VALUES
(1, 'Alice', 'Williams', 'Manager', 75000.00),
(2, 'Bob', 'Taylor', 'Manager', 80000.00);
 
INSERT INTO Accounts (CustomerID, AccountType, Balance, CreatedDate) 
VALUES 
(1, 'Savings', 5000.00, '2023-01-15'),
(1, 'Checking', 2000.00, '2023-02-10'),
(2, 'Savings', 10000.00, '2023-03-05'),
(3, 'Savings', 7000.00, '2023-04-20');
 
INSERT INTO Transactions (AccountID, TransactionType, Amount, TransactionDate) 
VALUES 
(1, 'Deposit', 1000.00, '2023-01-20 10:00:00'),
(1, 'Withdrawal', 500.00, '2023-01-25 14:30:00'),
(2, 'Deposit', 2000.00, '2023-02-15 09:15:00'),
(3, 'Withdrawal', 1000.00, '2023-04-25 16:45:00');
-- List all customers and their accounts with balances.
SELECT c.FirstName, c.LastName, a.AccountID, a.AccountType, a.Balance
FROM Customers c
JOIN Accounts a ON c.CustomerID = a.CustomerID;
 
-- List all employees who manage branches where the total account balances exceed $20,000.
SELECT 
    b.BranchName, 
    SUM(a.Balance) AS TotalBalance
FROM 
    Branches b
JOIN 
    Accounts a ON a.CustomerID IN (
        SELECT CustomerID 
        FROM Customers 
        WHERE BranchID = b.BranchID
    )
GROUP BY 
    b.BranchID
HAVING 
    SUM(a.Balance) > 20000;
 
-- Identify accounts whose balance is higher than the average balance of accounts within their branch.
SELECT a.AccountID, a.Balance, a.AccountType, a.CustomerID, b.BranchName
FROM Accounts a
JOIN Customers c ON a.CustomerID = c.CustomerID
JOIN Employees e ON c.CustomerID = e.EmployeeID
JOIN Branches b ON e.BranchID = b.BranchID
WHERE a.Balance > (
    SELECT AVG(a2.Balance) 
    FROM Accounts a2 
    JOIN Customers c2 ON a2.CustomerID = c2.CustomerID 
    JOIN Employees e2 ON c2.CustomerID = e2.EmployeeID 
    JOIN Branches b2 ON e2.BranchID = b2.BranchID
    WHERE b2.BranchID = b.BranchID
);
 
-- Find customers who have at least one transaction of more than $1,000.
SELECT DISTINCT c.FirstName, c.LastName, c.Email
FROM Customers c
JOIN Accounts a ON c.CustomerID = a.CustomerID
JOIN Transactions t ON a.AccountID = t.AccountID
WHERE t.Amount > 1000;
 
-- Get the total deposits and total withdrawals for each account, along with the account type.
SELECT 
    a.AccountID, 
    a.AccountType, 
    SUM(CASE WHEN t.TransactionType = 'Deposit' THEN t.Amount ELSE 0 END) AS TotalDeposits,
    SUM(CASE WHEN t.TransactionType = 'Withdrawal' THEN t.Amount ELSE 0 END) AS TotalWithdrawals
FROM Accounts a
LEFT JOIN Transactions t ON a.AccountID = t.AccountID
GROUP BY a.AccountID;
 
-- Find pairs of customers who have accounts with the same account type and belong to the same branch.
SELECT 
    c.CustomerID,
    c.FirstName,
    c.LastName,
    a.AccountType,
    e.EmployeeID,
    b.BranchName
FROM 
    Customers c
JOIN 
    Accounts a ON c.CustomerID = a.CustomerID
JOIN 
    Employees e ON e.EmployeeID = a.CustomerID -- Link customer to employee (if this is valid)
JOIN 
    Branches b ON e.BranchID = b.BranchID
ORDER BY 
    b.BranchName, a.AccountType;
-- Find customers who do not have any transactions recorded.
SELECT c.FirstName, c.LastName
FROM Customers c
LEFT JOIN Accounts a ON c.CustomerID = a.CustomerID
LEFT JOIN Transactions t ON a.AccountID = t.AccountID
WHERE t.TransactionID IS NULL;
 
-- Rank customers based on their total balance across all accounts.
SELECT c.FirstName, c.LastName, SUM(a.Balance) AS TotalBalance
FROM Customers c
JOIN Accounts a ON c.CustomerID = a.CustomerID
GROUP BY c.CustomerID
ORDER BY TotalBalance DESC;
 
-- List employees whose salary is above the average salary of all employees in their branch.
SELECT e.FirstName, e.LastName, e.Salary, b.BranchName
FROM Employees e
JOIN Branches b ON e.BranchID = b.BranchID
WHERE e.Salary > (
    SELECT AVG(e2.Salary)
    FROM Employees e2
    WHERE e2.BranchID = e.BranchID
);