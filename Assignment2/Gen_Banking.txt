package capgemini;
// Generalization
class BankAccount {
    String accountNumber;
    double balance;

    public BankAccount(String accountNumber, double balance) {
        super();
        this.accountNumber = accountNumber;
        this.balance = balance;
    }

    public void deposit(double amount) {
        if (amount > 0) {
            balance += amount;
            System.out.println("Deposited successfully: " + amount + " New Balance: " + balance);
        } else {
            System.out.println("Deposit amount must be positive.");
        }
    }

    public void withDraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            System.out.println("Withdrawn successfully: " + amount + " New Balance: " + balance);
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    public void checkBalance() {
        System.out.println("Balance for account " + accountNumber + " $ " + balance);
    }
}

// Specialization: SavingsAccount
class SavingsAccount extends BankAccount {
    double intRate;

    public SavingsAccount(String accountNumber, double balance, double intRate) {
        super(accountNumber, balance);
        this.intRate = intRate;
    }

    public void applyInterest() {
        double interest = balance * intRate;
        balance += interest;
        System.out.println("Interest of $ " + interest + " applied. New balance: " + balance);
    }
}

// Specialization: CheckingAccount
class CheckingAccount extends BankAccount {
    double fee;

    public CheckingAccount(String accountNumber, double balance, double fee) {
        super(accountNumber, balance);
        this.fee = fee;
    }

    @Override
    public void withDraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            balance -= fee; // Apply fee after withdrawal
            System.out.println("Withdrawn: " + amount + " with fee of " + fee + ". New Balance: " + balance);
        } else {
            System.out.println("Insufficient balance.");
        }
    }
}

// Specialization: BusinessAccount
class BusinessAccount extends BankAccount {
    double transactionFee;

    public BusinessAccount(String accountNumber, double balance, double transactionFee) {
        super(accountNumber, balance);
        this.transactionFee = transactionFee;
    }

    @Override
    public void withDraw(double amount) {
        if (amount > 0 && amount <= balance) {
            balance -= amount;
            balance -= transactionFee; 
            System.out.println("Business Withdrawal: " + amount + " with fee of " + transactionFee + ". New Balance: " + balance);
        } else {
            System.out.println("Insufficient balance.");
        }
    }
}

// Specialization: SIP
class SIP extends BankAccount {
    double monthlyDeposit;
    double investmentRate;

    public SIP(String accountNumber, double balance, double monthlyDeposit, double investmentRate) {
        super(accountNumber, balance);
        this.monthlyDeposit = monthlyDeposit;
        this.investmentRate = investmentRate;
    }

    public void depositMonthly() {
        balance += monthlyDeposit;
        System.out.println("Monthly deposit of " + monthlyDeposit + " applied. New Balance: " + balance);
    }

    public void applyInvestment() {
        double investmentReturn = balance * investmentRate;
        balance += investmentReturn;
        System.out.println("Investment return of $ " + investmentReturn + " applied. New Balance: " + balance);
    }
}

// Specialization: TradingAccount
class TradingAccount extends BankAccount {
    double tradeFee;
    double availableForTrade;

    public TradingAccount(String accountNumber, double balance, double tradeFee) {
        super(accountNumber, balance);
        this.tradeFee = tradeFee;
        this.availableForTrade = balance;
    }

    public void trade(double amount) {
        if (amount <= availableForTrade) {
            availableForTrade -= amount;
            balance -= tradeFee; 
            System.out.println("Traded: " + amount + " with fee of " + tradeFee + ". Available for trade: " + availableForTrade);
        } else {
            System.out.println("Insufficient funds to trade.");
        }
    }

    @Override
    public void withDraw(double amount) {
        if (amount <= availableForTrade) {
            availableForTrade -= amount;
            System.out.println("Withdrawn from trading account: " + amount + ". Available funds for trade: " + availableForTrade);
        } else {
            System.out.println("Insufficient funds in trading account.");
        }
    }
}

public class Gen_Banking_exam {
    public static void main(String[] args) {
        // Savings Account
        SavingsAccount sa = new SavingsAccount("SA123", 5000, 0.03);
        sa.deposit(10000);
        sa.applyInterest(); // Apply interest for savings account

        // Checking Account
        CheckingAccount ca = new CheckingAccount("CA456", 4000, 2.5);
        ca.deposit(1000);
        ca.withDraw(200); // Withdraw with fee for checking account

        // Business Account
        BusinessAccount ba = new BusinessAccount("BA789", 10000, 5.0);
        ba.deposit(5000);
        ba.withDraw(3000); 
     
        // SIP 
        SIP sip = new SIP("SIP101", 5000, 500, 0.05);
        sip.depositMonthly(); 
        sip.applyInvestment(); 
        // Trading Account
        TradingAccount ta = new TradingAccount("TA202", 10000, 15);
        ta.deposit(5000);
        ta.trade(2000);
        ta.withDraw(1000); 
    }
}
